<% include ../partials/header %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.js"></script>

<!-- These just hold data that I want to transfer from the backend javascript to the front end javascript -->
<h2 style="display:none;" id="gradesObj"><%=JSON.stringify(grades)%></h2>
<p style="display:none;" id="bodyColorHolder"> <%= course.color %> </p>

<div class="container">
    <header id="course-banner" class="course-show-head">
        <h2><%= course.name %></h2>
        <h3><%= course.percentage.toFixed(2) %>%</h3>
    </header>

    <section id="grade-graph" class="graph-section" style="width: 88%; margin:3rem auto;">
        <canvas id="gradeGraph"></canvas>
    </section>

    <section class="grades">
        <div class="add-grade">
            <h4 style="cursor: pointer;" id="add-grade-btn" class="newGrade-title">Add Grade</h4>
            <form action="/courses/<%= course._id %>/grade/new" method="POST">
                <div style="text-align: center;" class="">
                    <p id="gradeInputHelp"></p>
                </div>
                <div id="add-grade-accordian">
                    <div class="form-row">
                        <div class="left-form-box">
                            <label for="name">Grade Name: </label>
                        </div>
                        <div class="right-form-box">
                            <input onfocus="showGradeNameHint(this)" class="under-line-input" required type="text" name="grade[name]" placeholder="Name">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="left-form-box">
                            <label>Points Recieved: </label>
                        </div>
                        <div class="right-form-box">
                            <input onfocus="showPointsRecievedHint(this)" class="under-line-input" required type="number" name="grade[pointsRecieved]"
                                placeholder="Points Recieved">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="left-form-box">
                            <label>Total Possible Points: </label>
                        </div>
                        <div class="right-form-box">
                            <input onfocus="showPossiblePointsHint(this)" class="under-line-input" required type="number" name="grade[possiblePoints]"
                                placeholder="Total Possible Points">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="left-form-box">
                            <label>Grade Category: </label>
                        </div>
                        <div class="right-form-box">
                            <select onfocus="showCategoryHint(this)" id="category-selector" name="exsistingCategory[name]">
                                <% categories.forEach((category)=>{ %>
                                <option id="<%= category._id %>" value="<%= category.name %>"><%= category.name %></option>
                                <% }) %>
                                <option value="New">New</option>
                            </select>
                        </div>
                    </div>
                    <button id="edit-category-btn" onclick="EditCategory(this)">Edit This Category</button>
                    <div id="add-category-accordian">
                        <h5 class="newGrade-subtitle">
                            Create a category for this grade
                        </h5>
                        <div style="text-align: center;" class="">
                            <p id="categoryInputHelp"></p>
                        </div>
                        <div class="form-row">
                            <div class="left-form-box">
                                <label>Category Name: </label>
                            </div>
                            <div class="right-form-box">
                                <input onfocus="showCategoryNameHint(this)" class="under-line-input" type="text" name="newCategory[name]"
                                    placeholder="New Category name">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="left-form-box">
                                <label>Category Percent Worth: </label>
                            </div>
                            <div class="right-form-box">
                                <input onfocus="showPercentWorthHint(this)" class="under-line-input" type="number" name="newCategory[percentWorth]"
                                    placeholder="Percent Worth">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="left-form-box">
                                <label for="color">Click a Color: </label>
                            </div>
                            <div class="right-form-box">

                            </div>
                        </div>
                        <div class="form-row">
                            <div class="one-col-center">
                                <input id="courseColorInput" type="text" name="newCategory[color]"
                                    placeholder="Course color" style="display: none;">
                                <canvas id="colorPickerCanvas" width="375" height="60"></canvas>
                            </div>
                        </div>

                        <div class="row">
                            <div id="colorViewer"></div>
                        </div>
                    </div>
                    <button class="new-grade-submit submit-btn" type="submit">Create!</button>
                </div>

            </form>
        </div>
        <% for(var i = grades.length - 1; i > -1; i--){ %>
        <div class="grade">
            <div class="grade-title">
                <h4><%= grades[i].name %></h4>
            </div>
            <div class="grade-category">
                <p><%= grades[i].categoryName %></p>
            </div>
            <div class="grade-score">
                <p><%= grades[i].pointsRecieved %>/<%= grades[i].possiblePoints %></p>
            </div>
            <div class="grade-percentage">
                <p><%= grades[i].percentage.toFixed(2) %>%</p>
            </div>
            <div class="grade-edit">
                <a href="/courses/<%= course._id %>/grade/<%= grades[i]._id %>/edit">
                    Edit
                </a>
            </div>
        </div>
        <% } %>

    </section>

</div>

<!-- Script to show the hint messages for the inputs -->
<script>
    //grade hints 
    let gradeInputHelp = document.getElementById("gradeInputHelp");

    function showGradeNameHint(x) {
        gradeInputHelp.style.display = "block"
        gradeInputHelp.innerText = "The grade's name must be at least one character."
    }

    function showPointsRecievedHint(x) {
        gradeInputHelp.style.display = "block"
        gradeInputHelp.innerText = "The amount of points you recieved on the assignment."
    }

    function showPossiblePointsHint(x) {
        gradeInputHelp.style.display = "block"
        gradeInputHelp.innerText = "The maximum amount of points you could have recieved."
    }

    function showCategoryHint(x) {
        gradeInputHelp.style.display = "block"
        gradeInputHelp.innerText = "Type of assignments (homework, quizes, etc).\nSelect 'new' to add a new category."
    }

    //category hints
    let categoryInputHelp = document.getElementById("categoryInputHelp");

    function showCategoryNameHint(x) {
        categoryInputHelp.style.display = "block"
        categoryInputHelp.innerText = "Type of assignments (homework, quizes, etc)."
    }

    function showPercentWorthHint(x) {
        categoryInputHelp.style.display = "block"
        categoryInputHelp.innerText = "How much these types of assignments are worth.\nFor example, if this category is worth 15%\nof your grade, put 15."
    }
</script>

<!-- Script to change colors of the page -->
<script>
    //set background color
    var courseColorHexCode = document.getElementById("bodyColorHolder").textContent.trim();
    document.body.style.background = "linear-gradient(to right," + courseColorHexCode + "3d, " + courseColorHexCode + "67, " + courseColorHexCode + "3d)";

    let navText = document.getElementsByClassName("nav-text");
    for (var i = 0; i < navText.length; i++) {
        navText[i].style.color = courseColorHexCode;
    }
</script>

<!-- Script to make the grade/category form visable or not -->
<script>
    //Pulls out the 'new grade menu' when the 'add grade' button is clicked
    var addGradeBtn = document.getElementById("add-grade-btn").addEventListener("click", function () {
        var addGradeAccordian = document.getElementById("add-grade-accordian");
        if (addGradeAccordian.style.display === "block") {
            addGradeAccordian.style.display = "none";
        } else {
            addGradeAccordian.style.display = "block"
            var categorySelector = document.getElementById("category-selector")
            document.getElementById("add-category-accordian").style.display = (categorySelector.value == "New") ? "block" : "none";
        }
    })

    //Pulls out the new category menu if the new option is selected
    var categorySelector = document.getElementById("category-selector")
    categorySelector.addEventListener("change", () => {
        DecideToShowEditCategoryButton()
        

        document.getElementById("add-category-accordian").style.display = (GetSelectedCategory().value == "New") ? "block" : "none"
    }) 

    function GetSelectedCategory(){
        var options = categorySelector.querySelectorAll("option");
        var selectedValue;
        var selectedcategoryId;

        options.forEach(option => {
            if (option.selected){
                selectedValue = option.value;
                selectedcategoryId = option.id
            } 
        })
        
        return {
            value: selectedValue,
            id: selectedcategoryId
        }
    }

    function DecideToShowEditCategoryButton(){
        if(GetSelectedCategory().value == "New"){
            document.getElementById("edit-category-btn").style.display = "none"
        }else{
            document.getElementById("edit-category-btn").style.display = "inline-block"
        }
    }

    function PageLoad(){
        console.log("word")
        DecideToShowEditCategoryButton()
    }

    function EditCategory(x){
        if(GetSelectedCategory().id)
            window.location.href = '/category/' + GetSelectedCategory().id + "/edit";
    }
</script>

<!-- Puts the grades in the graph -->
<script>
    var gradesList = JSON.parse(document.getElementById("gradesObj").innerText);

    function getField(input, field) {
        var output = [];
        input.forEach((inp) => output.push(inp[field]))
        return output
    }

    let graph = document.getElementById("gradeGraph").getContext("2d");
    Chart.defaults.global.defaultFontColor = 'black';
    let GradeGraph = new Chart(graph, {
        type: "bar",

        data: {
            labels: getField(gradesList, "name"),

            datasets: [
                {
                    label: "Course Percentage",
                    data: getField(gradesList, "coursePercentAfterThisGradeIsadded"),
                    type: "line",
                    backgroundColor: "rgba(0,0,0,0)",
                    backgroundColor: "rgba(0,0,0,0)",
                    borderWidth: 3,
                    borderColor: "#000",
                    hoverBorderWidth: 2.3
                },
                {
                    type: "bar",
                    label: "Grade Percentage",
                    data: getField(gradesList, "percentage"),
                    backgroundColor: getField(gradesList, "categoryColor"),
                    borderWidth: 1.5,
                    borderColor: "#777",
                    hoverBorderWidth: 2.3,
                    hoverBorderColor: "#000"
                }
            ]
        },
        options: {
            legend: {
                labels: {
                    fontColor: 'black'
                }
            }
        }
    })
</script>

<!-- Script to pick a color from the pallet -->
<script>
    //Script for picking a color
    var canvas = document.getElementById("colorPickerCanvas");

    function getElementPosition(obj) {
        var curleft = 0, curtop = 0;
        if (obj.offsetParent) {
            do {
                curleft += obj.offsetLeft;
                curtop += obj.offsetTop;
            } while (obj = obj.offsetParent);
            return { x: curleft, y: curtop };
        }
        return undefined;
    }

    function getEventLocation(element, event) {
        var pos = getElementPosition(element);

        return {
            x: (event.pageX - pos.x),
            y: (event.pageY - pos.y)
        };
    }

    function rgbToHex(r, g, b) {
        if (r > 255 || g > 255 || b > 255)
            throw "Invalid color component";
        return ((r << 16) | (g << 8) | b).toString(16);
    }

    function drawImageFromWebUrl(sourceurl) {
        var img = new Image();
        img.crossOrigin = "Anonymous";

        img.addEventListener("load", function () {
            // The image can be drawn from any source
            canvas.width = img.width * 1.2;
            canvas.height = img.height * 1.2;
            canvas.getContext("2d").drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height);

        });

        img.setAttribute("src", sourceurl);
    }
    // Draw a base64 image because this is a fiddle, and if we try with an image from URL we'll get tainted canvas error
    // Read more about here : http://ourcodeworld.com/articles/read/182/the-canvas-has-been-tainted-by-cross-origin-data-and-tainted-canvases-may-not-be-exported
    drawImageFromWebUrl("https://res.cloudinary.com/clubphotos/image/upload/v1576562609/Light_Colors.png");

    canvas.addEventListener("click", function (e) {
        var eventLocation = getEventLocation(this, e);
        var coord = "x=" + eventLocation.x + ", y=" + eventLocation.y;

        // Get the data of the pixel according to the location generate by the getEventLocation function
        var context = this.getContext('2d');
        var pixelData = context.getImageData(eventLocation.x, eventLocation.y, 1, 1).data;

        // If transparency on the image
        if ((pixelData[0] == 0) && (pixelData[1] == 0) && (pixelData[2] == 0) && (pixelData[3] == 0)) {
            coord += " (Transparent color detected, cannot be converted to HEX)";
        }

        var hex = "#" + ("000000" + rgbToHex(pixelData[0], pixelData[1], pixelData[2])).slice(-6);

        // Draw the color and coordinates.
        document.getElementById("colorViewer").style.backgroundColor = hex;
        document.getElementById("courseColorInput").value = hex;
    }, false);
</script>

<% include ../partials/footer %>